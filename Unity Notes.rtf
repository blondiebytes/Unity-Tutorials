{\rtf1\ansi\ansicpg1252\cocoartf1347\cocoasubrtf570
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red51\green100\blue164;\red68\green68\blue68;\red245\green125\blue0;
\red0\green150\blue149;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\b\fs24 \cf0 Unity Notes:\

\b0 \
Access Documentation:\
-Command + \'91\
\
Debugging:\
\pard\pardeftab720

\f1 \cf0 -\cf2 Debug\cf3 .Log(\'93thingssss\'94);\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0 \cf0 \
\
Collisions:\
-Static Colliders shouldn\'92t move (i.e. Walls/Floors)\
-Dynamic Colliders can move and have a rigid body attached\
	-Standard rigid bodies are moved using physics forces (FixedUpdate)\
	-Kinematic rigid bodies are moved using their transforms (isKinematic)\
-Make sure the collider maps/components fit the object.\
-If it is supposed to trigger -> make sure IsTrigger is selected\
-triggers don\'92t have physical collisions\
-scripts with triggers methods must be attached to a game object\
\
Control Movement Via Keyboard:\
\pard\pardeftab720

\f1 \cf2 float\cf3  moveHorizontal = \cf2 Input\cf3 .GetAxis (\cf4 "Horizontal"\cf3 );\
\cf2 float\cf3  moveVertical = \cf2 Input\cf3 .GetAxis (\cf4 "Vertical"\cf3 );\
\
\cf2 Vector3\cf3  movement = \cf5 new\cf3  \cf2 Vector3\cf3  (moveHorizontal, \cf4 0.0f\cf3 , moveVertical);\
\
GetComponent<\cf2 Rigidbody\cf3 >().velocity = movement;\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0 \cf0 \
Lighting:\
-Directional lights -> light up the entire scene based on rotation, not position.\
-Particles- Additive -> takes away black background\
\
Hierarchy:\
-If we are using an empty game object to organize, make sure its position is set to the origin.\
\
For Backgrounds/Image, prevent distortions by keeping 1:2 or whatever specific ratio given in the inspector window\
- Orthographic (no perspective) VS Perspective\
\
Math Functions: Mathf\
\
Properties must be serialized to view them in the inspector\
\pard\pardeftab720

\f1 \cf3 [System.Serializable]\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0 \cf0 Organization:\
- We first create an empty game object say Asteroid (Reset & Set!)\
- Then we make all the art stuff it\'92s child (Reset!)\
- Then add scripts, colliders, triggers to Asteroid game object\
- When finish, make it a prefab.\
- Then make a different game controller to do all the spawning\
\
Other Organization Tips:\
-If  we can\'92t set it in the Inspector, then we shouldn\'92t see it in the inspector -> set it to private\
\
Coroutines:\
-call them with StartCoroutine(name());\
-must return IEnumerator\
\
Audio in Unity:\
-audio clips -> hold data\
-audio sources -> play them in the scenes\
-audio listener\
\
Different Spaces:\
-Viewport Space (0,0) (1,1) width, height\
-Screen Space (pixels)\
\
Baking & Agent for AI\
-AI path finding; avoiding obstacles & going to the player
\f1 \cf3 \
\pard\pardeftab720
\cf3 \
}